// Code generated by protoc-gen-go. DO NOT EDIT.
// source: git.proto

package git

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RequestPath struct {
	Path                 string   `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequestPath) Reset()         { *m = RequestPath{} }
func (m *RequestPath) String() string { return proto.CompactTextString(m) }
func (*RequestPath) ProtoMessage()    {}
func (*RequestPath) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d2ecb6e8d788208, []int{0}
}

func (m *RequestPath) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestPath.Unmarshal(m, b)
}
func (m *RequestPath) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestPath.Marshal(b, m, deterministic)
}
func (m *RequestPath) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestPath.Merge(m, src)
}
func (m *RequestPath) XXX_Size() int {
	return xxx_messageInfo_RequestPath.Size(m)
}
func (m *RequestPath) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestPath.DiscardUnknown(m)
}

var xxx_messageInfo_RequestPath proto.InternalMessageInfo

func (m *RequestPath) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type RequestHash struct {
	Hash                 string   `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequestHash) Reset()         { *m = RequestHash{} }
func (m *RequestHash) String() string { return proto.CompactTextString(m) }
func (*RequestHash) ProtoMessage()    {}
func (*RequestHash) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d2ecb6e8d788208, []int{1}
}

func (m *RequestHash) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestHash.Unmarshal(m, b)
}
func (m *RequestHash) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestHash.Marshal(b, m, deterministic)
}
func (m *RequestHash) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestHash.Merge(m, src)
}
func (m *RequestHash) XXX_Size() int {
	return xxx_messageInfo_RequestHash.Size(m)
}
func (m *RequestHash) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestHash.DiscardUnknown(m)
}

var xxx_messageInfo_RequestHash proto.InternalMessageInfo

func (m *RequestHash) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

type RequestFile struct {
	Path                 string   `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Filedata             []byte   `protobuf:"bytes,2,opt,name=filedata,proto3" json:"filedata,omitempty"`
	Filename             string   `protobuf:"bytes,3,opt,name=filename,proto3" json:"filename,omitempty"`
	Filemode             uint32   `protobuf:"varint,4,opt,name=filemode,proto3" json:"filemode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequestFile) Reset()         { *m = RequestFile{} }
func (m *RequestFile) String() string { return proto.CompactTextString(m) }
func (*RequestFile) ProtoMessage()    {}
func (*RequestFile) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d2ecb6e8d788208, []int{2}
}

func (m *RequestFile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestFile.Unmarshal(m, b)
}
func (m *RequestFile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestFile.Marshal(b, m, deterministic)
}
func (m *RequestFile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestFile.Merge(m, src)
}
func (m *RequestFile) XXX_Size() int {
	return xxx_messageInfo_RequestFile.Size(m)
}
func (m *RequestFile) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestFile.DiscardUnknown(m)
}

var xxx_messageInfo_RequestFile proto.InternalMessageInfo

func (m *RequestFile) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *RequestFile) GetFiledata() []byte {
	if m != nil {
		return m.Filedata
	}
	return nil
}

func (m *RequestFile) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func (m *RequestFile) GetFilemode() uint32 {
	if m != nil {
		return m.Filemode
	}
	return 0
}

type ResponseResult struct {
	Result               string   `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResponseResult) Reset()         { *m = ResponseResult{} }
func (m *ResponseResult) String() string { return proto.CompactTextString(m) }
func (*ResponseResult) ProtoMessage()    {}
func (*ResponseResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d2ecb6e8d788208, []int{3}
}

func (m *ResponseResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResponseResult.Unmarshal(m, b)
}
func (m *ResponseResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResponseResult.Marshal(b, m, deterministic)
}
func (m *ResponseResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseResult.Merge(m, src)
}
func (m *ResponseResult) XXX_Size() int {
	return xxx_messageInfo_ResponseResult.Size(m)
}
func (m *ResponseResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseResult.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseResult proto.InternalMessageInfo

func (m *ResponseResult) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

type ResponseTree struct {
	Trees                []*Tree  `protobuf:"bytes,1,rep,name=trees,proto3" json:"trees,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResponseTree) Reset()         { *m = ResponseTree{} }
func (m *ResponseTree) String() string { return proto.CompactTextString(m) }
func (*ResponseTree) ProtoMessage()    {}
func (*ResponseTree) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d2ecb6e8d788208, []int{4}
}

func (m *ResponseTree) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResponseTree.Unmarshal(m, b)
}
func (m *ResponseTree) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResponseTree.Marshal(b, m, deterministic)
}
func (m *ResponseTree) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseTree.Merge(m, src)
}
func (m *ResponseTree) XXX_Size() int {
	return xxx_messageInfo_ResponseTree.Size(m)
}
func (m *ResponseTree) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseTree.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseTree proto.InternalMessageInfo

func (m *ResponseTree) GetTrees() []*Tree {
	if m != nil {
		return m.Trees
	}
	return nil
}

type Tree struct {
	Name                 string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Mode                 uint32   `protobuf:"varint,2,opt,name=Mode,proto3" json:"Mode,omitempty"`
	Hash                 string   `protobuf:"bytes,3,opt,name=Hash,proto3" json:"Hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Tree) Reset()         { *m = Tree{} }
func (m *Tree) String() string { return proto.CompactTextString(m) }
func (*Tree) ProtoMessage()    {}
func (*Tree) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d2ecb6e8d788208, []int{5}
}

func (m *Tree) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Tree.Unmarshal(m, b)
}
func (m *Tree) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Tree.Marshal(b, m, deterministic)
}
func (m *Tree) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tree.Merge(m, src)
}
func (m *Tree) XXX_Size() int {
	return xxx_messageInfo_Tree.Size(m)
}
func (m *Tree) XXX_DiscardUnknown() {
	xxx_messageInfo_Tree.DiscardUnknown(m)
}

var xxx_messageInfo_Tree proto.InternalMessageInfo

func (m *Tree) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Tree) GetMode() uint32 {
	if m != nil {
		return m.Mode
	}
	return 0
}

func (m *Tree) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func init() {
	proto.RegisterType((*RequestPath)(nil), "git.RequestPath")
	proto.RegisterType((*RequestHash)(nil), "git.RequestHash")
	proto.RegisterType((*RequestFile)(nil), "git.RequestFile")
	proto.RegisterType((*ResponseResult)(nil), "git.ResponseResult")
	proto.RegisterType((*ResponseTree)(nil), "git.ResponseTree")
	proto.RegisterType((*Tree)(nil), "git.Tree")
}

func init() { proto.RegisterFile("git.proto", fileDescriptor_0d2ecb6e8d788208) }

var fileDescriptor_0d2ecb6e8d788208 = []byte{
	// 331 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x52, 0x4d, 0x4f, 0xc2, 0x40,
	0x10, 0xa5, 0xb4, 0x12, 0x19, 0xf0, 0x6b, 0x4d, 0x48, 0xc3, 0xc5, 0xba, 0xa7, 0x9e, 0x30, 0x01,
	0x4f, 0xde, 0x50, 0x23, 0x7a, 0xf0, 0x23, 0x1b, 0xfd, 0x01, 0xab, 0x3b, 0xc2, 0x26, 0xd0, 0xad,
	0xbb, 0xc3, 0xc1, 0x5f, 0xed, 0x5f, 0x30, 0xbb, 0x96, 0x06, 0x02, 0xde, 0xde, 0xbc, 0x79, 0xaf,
	0x33, 0x6f, 0xba, 0xd0, 0x9e, 0x6a, 0x1a, 0x94, 0xd6, 0x90, 0x61, 0xf1, 0x54, 0x13, 0x3f, 0x87,
	0x8e, 0xc0, 0xaf, 0x25, 0x3a, 0x7a, 0x91, 0x34, 0x63, 0x0c, 0x92, 0x52, 0xd2, 0x2c, 0x8d, 0xb2,
	0x28, 0x6f, 0x8b, 0x80, 0xd7, 0x24, 0xf7, 0xd2, 0x05, 0xc9, 0x4c, 0xba, 0x5a, 0xe2, 0x31, 0x5f,
	0xd6, 0x92, 0x3b, 0x3d, 0xc7, 0x5d, 0x5f, 0x61, 0x7d, 0xd8, 0xff, 0xd4, 0x73, 0x54, 0x92, 0x64,
	0xda, 0xcc, 0xa2, 0xbc, 0x2b, 0xea, 0x7a, 0xd5, 0x2b, 0xe4, 0x02, 0xd3, 0x38, 0x78, 0xea, 0x7a,
	0xd5, 0x5b, 0x18, 0x85, 0x69, 0x92, 0x45, 0xf9, 0x81, 0xa8, 0x6b, 0x9e, 0xc3, 0xa1, 0x40, 0x57,
	0x9a, 0xc2, 0xa1, 0x40, 0xb7, 0x9c, 0x13, 0xeb, 0x41, 0xcb, 0x06, 0x54, 0xcd, 0xae, 0x2a, 0x7e,
	0x01, 0xdd, 0x95, 0xf2, 0xd5, 0x22, 0xb2, 0x33, 0xd8, 0x23, 0x8b, 0xe8, 0xd2, 0x28, 0x8b, 0xf3,
	0xce, 0xb0, 0x3d, 0xf0, 0x67, 0xf1, 0x1d, 0xf1, 0xc7, 0xf3, 0x6b, 0x48, 0x82, 0x90, 0x41, 0xf2,
	0xe4, 0xd7, 0xaa, 0xa2, 0x78, 0xec, 0xb9, 0x47, 0xbf, 0x4e, 0x33, 0xac, 0x13, 0xb0, 0xe7, 0xfc,
	0x75, 0xaa, 0xf5, 0x03, 0x1e, 0xfe, 0x44, 0x10, 0x4f, 0x34, 0xb1, 0x31, 0xf4, 0x6e, 0x2c, 0x4a,
	0xc2, 0x71, 0xa1, 0x1e, 0x0a, 0x4d, 0xb7, 0xda, 0xe2, 0x07, 0x19, 0xfb, 0xcd, 0x8e, 0xc3, 0xdc,
	0xb5, 0x1f, 0xd0, 0x3f, 0xad, 0x98, 0xf5, 0x54, 0xbc, 0xc1, 0xae, 0xe0, 0x68, 0xac, 0xd4, 0xb3,
	0x7d, 0x2b, 0x95, 0x24, 0x0c, 0x47, 0xde, 0xf0, 0x7a, 0xe6, 0x3f, 0xef, 0x25, 0x74, 0x26, 0x48,
	0x02, 0x4b, 0x13, 0x12, 0x6d, 0xcf, 0x3c, 0xd9, 0xf0, 0x79, 0x11, 0x6f, 0xb0, 0x11, 0x80, 0xc0,
	0x42, 0xa1, 0xdd, 0x36, 0xf9, 0x70, 0x3b, 0x4d, 0xef, 0xad, 0xf0, 0xb2, 0x46, 0xbf, 0x01, 0x00,
	0x00, 0xff, 0xff, 0xb3, 0xe5, 0x8f, 0x23, 0x66, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GitClient is the client API for Git service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GitClient interface {
	CreateAndInitDirectory(ctx context.Context, in *RequestPath, opts ...grpc.CallOption) (*ResponseResult, error)
	AddOrUpdateFile(ctx context.Context, in *RequestFile, opts ...grpc.CallOption) (*ResponseResult, error)
	GetRepoTree(ctx context.Context, in *RequestPath, opts ...grpc.CallOption) (*ResponseTree, error)
	RenderTree(ctx context.Context, in *RequestHash, opts ...grpc.CallOption) (*ResponseTree, error)
}

type gitClient struct {
	cc *grpc.ClientConn
}

func NewGitClient(cc *grpc.ClientConn) GitClient {
	return &gitClient{cc}
}

func (c *gitClient) CreateAndInitDirectory(ctx context.Context, in *RequestPath, opts ...grpc.CallOption) (*ResponseResult, error) {
	out := new(ResponseResult)
	err := c.cc.Invoke(ctx, "/git.Git/CreateAndInitDirectory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitClient) AddOrUpdateFile(ctx context.Context, in *RequestFile, opts ...grpc.CallOption) (*ResponseResult, error) {
	out := new(ResponseResult)
	err := c.cc.Invoke(ctx, "/git.Git/AddOrUpdateFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitClient) GetRepoTree(ctx context.Context, in *RequestPath, opts ...grpc.CallOption) (*ResponseTree, error) {
	out := new(ResponseTree)
	err := c.cc.Invoke(ctx, "/git.Git/GetRepoTree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitClient) RenderTree(ctx context.Context, in *RequestHash, opts ...grpc.CallOption) (*ResponseTree, error) {
	out := new(ResponseTree)
	err := c.cc.Invoke(ctx, "/git.Git/RenderTree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GitServer is the server API for Git service.
type GitServer interface {
	CreateAndInitDirectory(context.Context, *RequestPath) (*ResponseResult, error)
	AddOrUpdateFile(context.Context, *RequestFile) (*ResponseResult, error)
	GetRepoTree(context.Context, *RequestPath) (*ResponseTree, error)
	RenderTree(context.Context, *RequestHash) (*ResponseTree, error)
}

// UnimplementedGitServer can be embedded to have forward compatible implementations.
type UnimplementedGitServer struct {
}

func (*UnimplementedGitServer) CreateAndInitDirectory(ctx context.Context, req *RequestPath) (*ResponseResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAndInitDirectory not implemented")
}
func (*UnimplementedGitServer) AddOrUpdateFile(ctx context.Context, req *RequestFile) (*ResponseResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrUpdateFile not implemented")
}
func (*UnimplementedGitServer) GetRepoTree(ctx context.Context, req *RequestPath) (*ResponseTree, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRepoTree not implemented")
}
func (*UnimplementedGitServer) RenderTree(ctx context.Context, req *RequestHash) (*ResponseTree, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenderTree not implemented")
}

func RegisterGitServer(s *grpc.Server, srv GitServer) {
	s.RegisterService(&_Git_serviceDesc, srv)
}

func _Git_CreateAndInitDirectory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestPath)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServer).CreateAndInitDirectory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/git.Git/CreateAndInitDirectory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServer).CreateAndInitDirectory(ctx, req.(*RequestPath))
	}
	return interceptor(ctx, in, info, handler)
}

func _Git_AddOrUpdateFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServer).AddOrUpdateFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/git.Git/AddOrUpdateFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServer).AddOrUpdateFile(ctx, req.(*RequestFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _Git_GetRepoTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestPath)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServer).GetRepoTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/git.Git/GetRepoTree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServer).GetRepoTree(ctx, req.(*RequestPath))
	}
	return interceptor(ctx, in, info, handler)
}

func _Git_RenderTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestHash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServer).RenderTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/git.Git/RenderTree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServer).RenderTree(ctx, req.(*RequestHash))
	}
	return interceptor(ctx, in, info, handler)
}

var _Git_serviceDesc = grpc.ServiceDesc{
	ServiceName: "git.Git",
	HandlerType: (*GitServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAndInitDirectory",
			Handler:    _Git_CreateAndInitDirectory_Handler,
		},
		{
			MethodName: "AddOrUpdateFile",
			Handler:    _Git_AddOrUpdateFile_Handler,
		},
		{
			MethodName: "GetRepoTree",
			Handler:    _Git_GetRepoTree_Handler,
		},
		{
			MethodName: "RenderTree",
			Handler:    _Git_RenderTree_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "git.proto",
}
